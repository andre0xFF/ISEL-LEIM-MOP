package tps.tp4.game;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import tps.tp4.game.aux.RingList;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class Game {

    private JFrame frame = new JFrame();
    private JPanel main_panel;

    public static final int MAX_PLAYERS = 5;
    private JPanel panel_player_1;
    private JPanel panel_player_2;
    private JPanel panel_player_3;
    private JPanel panel_player_4;
    private JPanel panel_player_5;

    private RingList<Player> players = new RingList<Player>() {{
        add(new Player(Color.BLUE));
        add(new Player(Color.RED));
    }};

    private Deck deck;
    private Board board;

    public Game() {
        this.frame.setContentPane(main_panel);
        this.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.frame.pack();
        this.listeners();
        this.frame.setVisible(true);
    }

    private void on_left_click(Point point) {
        if (!this.board.empty(point)) {
            return;
        }

        Tile tile = deck.tile();

        if (tile == null) {
            on_game_over();
            return;
        }

        boolean eval = this.board.tile(tile, point);

        if (!eval) {
            return;
        }

        this.deck.next();
        this.players.next();
    }

    private void on_right_click(Point point) {
        boolean eval = this.board.marker(this.players.get(), point);
    }

    private void on_game_over() {
        // TODO
    }

    private void listeners() {
        board.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isLeftMouseButton(e)) {
                    on_left_click(new Point(e.getX(), e.getY()));
                }
                else if (SwingUtilities.isRightMouseButton(e)) {
                    on_right_click(new Point(e.getX(), e.getY()));
                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        main_panel = new JPanel();
        main_panel.setLayout(new GridLayoutManager(6, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JToolBar toolBar1 = new JToolBar();
        main_panel.add(toolBar1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        panel_player_1 = new JPanel();
        panel_player_1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel_player_1.setEnabled(false);
        main_panel.add(panel_player_1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(200, 100), new Dimension(200, -1), null, 0, false));
        panel_player_1.setBorder(BorderFactory.createTitledBorder("Player #1"));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        main_panel.add(panel1, new GridConstraints(1, 2, 5, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(200, -1), new Dimension(200, -1), null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder("Deck"));
        deck = new Deck();
        panel1.add(deck, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(70, 70), null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        panel_player_2 = new JPanel();
        panel_player_2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel_player_2.setEnabled(false);
        main_panel.add(panel_player_2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(200, 100), new Dimension(200, -1), null, 0, false));
        panel_player_2.setBorder(BorderFactory.createTitledBorder("Player #2"));
        panel_player_3 = new JPanel();
        panel_player_3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel_player_3.setEnabled(false);
        main_panel.add(panel_player_3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(200, 100), new Dimension(200, -1), null, 0, false));
        panel_player_3.setBorder(BorderFactory.createTitledBorder("Player #3"));
        panel_player_4 = new JPanel();
        panel_player_4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel_player_4.setEnabled(false);
        main_panel.add(panel_player_4, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(200, 100), new Dimension(200, -1), null, 0, false));
        panel_player_4.setBorder(BorderFactory.createTitledBorder("Player #4"));
        panel_player_5 = new JPanel();
        panel_player_5.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel_player_5.setEnabled(false);
        main_panel.add(panel_player_5, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(200, 100), new Dimension(200, -1), null, 0, false));
        panel_player_5.setBorder(BorderFactory.createTitledBorder("Player #5"));
        board = new Board();
        main_panel.add(board, new GridConstraints(1, 1, 5, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(1400, 980), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return main_panel;
    }
}
